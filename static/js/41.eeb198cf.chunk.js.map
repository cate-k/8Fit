{"version":3,"file":"static/js/41.eeb198cf.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","../node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":["import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage as string, challenge, this.name, this.sessionTime);\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport interface MetamaskAdapterOptions {\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n}\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private rehydrated = false;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  constructor(adapterOptions: MetamaskAdapterOptions = {}) {\n    super();\n    this.chainConfig = adapterOptions.chainConfig || null;\n    this.sessionTime = adapterOptions.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(options: { sessionTime?: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    // set default to mainnet\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnect();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId: chainConfig.chainId, chainName: chainConfig.displayName, rpcUrls: [chainConfig.rpcTarget] }],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["BaseEvmAdapter","this","provider","chainConfig","_this$chainConfig","chainId","WalletLoginError","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","params","signedMessage","verifySignedChallenge","sessionTime","saveToken","clearToken","BaseAdapter","MetamaskAdapter","constructor","adapterOptions","_defineProperty","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","WALLET_ADAPTERS","metamaskProvider","_","Error","options","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","emit","ADAPTER_EVENTS","log","autoConnect","rehydrated","connect","setAdapterSettings","getChainConfig","adapter","switchChain","once","disconnect","reconnected","cleanup","removeAllListeners","switchError","code","chainName","displayName","rpcUrls","rpcTarget"],"sourceRoot":""}