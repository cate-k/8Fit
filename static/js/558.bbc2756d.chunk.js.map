{"version":3,"file":"static/js/558.bbc2756d.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","../../../src/index.ts","../node_modules/@web3auth/wallet-connect-v1-adapter/src/config.ts","../node_modules/@web3auth/wallet-connect-v1-adapter/src/walletConnectV1adapter.ts"],"sourcesContent":["import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage as string, challenge, this.name, this.sessionTime);\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n",null,"import { CHAIN_NAMESPACES, IWalletConnectExtensionAdapter } from \"@web3auth/base\";\n\nexport const WALLET_CONNECT_EXTENSION_ADAPTERS: IWalletConnectExtensionAdapter[] = [\n  {\n    name: \"Rainbow\",\n    chains: [CHAIN_NAMESPACES.EIP155],\n    logo: \"https://images.web3auth.io/login-rainbow.svg\",\n    mobile: {\n      native: \"rainbow:\",\n      universal: \"https://rnbwapp.com\",\n    },\n    desktop: {\n      native: \"\",\n      universal: \"\",\n    },\n  },\n  {\n    name: \"MetaMask\",\n    chains: [CHAIN_NAMESPACES.EIP155],\n    logo: \"https://images.web3auth.io/login-metamask.svg\",\n    mobile: {\n      native: \"metamask:\",\n      universal: \"https://metamask.app.link\",\n    },\n    desktop: {\n      native: \"\",\n      universal: \"\",\n    },\n  },\n];\n","import WalletConnect from \"@walletconnect/client\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletConnectV1Data,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\nimport { WalletConnectProvider } from \"@web3auth/ethereum-provider\";\n\nimport { WALLET_CONNECT_EXTENSION_ADAPTERS } from \"./config\";\nimport { WalletConnectV1AdapterOptions } from \"./interface\";\n\nclass WalletConnectV1Adapter extends BaseEvmAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.WALLET_CONNECT_V1;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly adapterOptions: WalletConnectV1AdapterOptions;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public adapterData: WalletConnectV1Data = {\n    uri: \"\",\n    extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS,\n  };\n\n  public connector: WalletConnect | null = null;\n\n  private wcProvider: WalletConnectProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(options: WalletConnectV1AdapterOptions = {}) {\n    super();\n    this.adapterOptions = { ...options };\n    this.chainConfig = options.chainConfig || null;\n    this.sessionTime = options.sessionTime || 86400;\n  }\n\n  get connected(): boolean {\n    return !!this.connector?.connected;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.wcProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    }\n    // Create a connector\n    this.connector = this.getWalletConnectInstance();\n    this.wcProvider = new WalletConnectProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig }, connector: this.connector });\n\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n    this.status = ADAPTER_STATUS.READY;\n    log.debug(\"initializing wallet connect v1 adapter\");\n    if (this.connector.connected) {\n      this.rehydrated = true;\n      await this.onConnectHandler({ accounts: this.connector.accounts, chainId: this.connector.chainId });\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n\n    if (this.connected) {\n      await this.onConnectHandler({ accounts: this.connector.accounts, chainId: this.connector.chainId });\n      return this.provider;\n    }\n\n    if (this.status !== ADAPTER_STATUS.CONNECTING) {\n      // for wallet connect qr code modal we have to create a new connector, coz wallet connect internally does not open\n      // modal again on existing instance if connection is pending.\n      if (this.adapterOptions.adapterSettings?.qrcodeModal) {\n        this.connector = this.getWalletConnectInstance();\n        this.wcProvider = new WalletConnectProvider({\n          config: {\n            chainConfig: this.chainConfig as CustomChainConfig,\n            // network switching can be skipped with custom ui\n            skipLookupNetwork: this.adapterOptions.adapterSettings?.skipNetworkSwitching,\n          },\n          connector: this.connector,\n        });\n      }\n      await this.createNewSession();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1 });\n    }\n    return new Promise((resolve, reject) => {\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\n      // for wallet connect default modal.\n      this.connector.on(\"modal_closed\", async () => {\n        this.status = ADAPTER_STATUS.READY;\n        this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n        return reject(new Error(\"User closed modal\"));\n      });\n      try {\n        // Subscribe to session connection\n        this.connector.on(\"connect\", async (error: Error | null, payload: { params: { accounts: string[]; chainId: number }[] }) => {\n          if (error) {\n            this.emit(ADAPTER_EVENTS.ERRORED, error);\n          }\n          log.debug(\"connected event emitted by web3auth\");\n          await this.onConnectHandler(payload.params[0]);\n          return resolve(this.provider);\n        });\n      } catch (error: unknown) {\n        log.error(\"Wallet connect v1 adapter error while connecting\", error);\n        // ready again to be connected\n        this.status = ADAPTER_STATUS.READY;\n        this.rehydrated = true;\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        reject(\n          error instanceof Web3AuthError\n            ? error\n            : WalletLoginError.connectionError(`Failed to login with wallet connect: ${(error as Error)?.message || \"\"}`)\n        );\n      }\n    });\n  }\n\n  setAdapterSettings(options: { sessionTime?: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    const { cleanup } = options;\n    if (!this.connector || !this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    await super.disconnect();\n    await this.connector.killSession();\n    this.rehydrated = false;\n    if (cleanup) {\n      this.connector = null;\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.wcProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  private async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    try {\n      if (!this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n      const networkSwitch = this.adapterOptions.adapterSettings?.networkSwitchModal;\n      if (networkSwitch) {\n        await networkSwitch.addNetwork({ chainConfig, appOrigin: window.location.hostname });\n      }\n      await this.wcProvider.addChain(chainConfig);\n    } catch (error) {\n      log.error(error);\n    }\n  }\n\n  private async switchChain(connectedChainConfig: Partial<CustomChainConfig>, chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    const networkSwitch = this.adapterOptions.adapterSettings?.networkSwitchModal;\n\n    if (networkSwitch) {\n      await networkSwitch.switchNetwork({\n        currentChainConfig: chainConfig,\n        newChainConfig: connectedChainConfig,\n        appOrigin: window.location.hostname,\n      });\n    }\n    await this.wcProvider.switchChain({ chainId: chainConfig.chainId, lookup: false, addChain: false });\n  }\n\n  private async createNewSession(opts: { forceNewSession: boolean } = { forceNewSession: false }): Promise<void> {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    if (opts.forceNewSession && this.connector.pending) {\n      await this.connector.killSession();\n    }\n    // for wallet connect qr modal\n    if (this.adapterOptions?.adapterSettings?.qrcodeModal) {\n      await this.connector.createSession({ chainId: parseInt(this.chainConfig?.chainId || \"0x1\", 16) });\n      return;\n    }\n\n    // for web3auth qr code modal\n    return new Promise<void>((resolve, reject) => {\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\n      log.debug(\"creating new session for web3auth wallet connect\");\n      this.connector.on(\"display_uri\", async (err, payload) => {\n        if (err) {\n          this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.connectionError(\"Failed to display wallet connect qr code\"));\n          return reject(err);\n        }\n        const uri = payload.params[0];\n        this.updateAdapterData({ uri, extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS } as WalletConnectV1Data);\n\n        this.connector?.off(\"display_uri\");\n        return resolve();\n      });\n\n      this.connector.createSession({ chainId: parseInt(this.chainConfig?.chainId || \"0x1\", 16) }).catch((error) => {\n        log.error(\"error while creating new wallet connect session\", error);\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        return reject(error);\n      });\n    });\n  }\n\n  private async onConnectHandler(params: { accounts: string[]; chainId: number }) {\n    if (!this.connector || !this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"Chain config is not set\");\n\n    const { chainId } = params;\n    log.debug(\"connected chainId in hex\");\n    if (chainId !== parseInt(this.chainConfig.chainId, 16)) {\n      const connectedChainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, chainId) || {\n        chainId: `0x${chainId.toString(16)}`,\n        displayName: \"Unknown Network\",\n      };\n\n      const isCustomUi = this.adapterOptions.adapterSettings?.qrcodeModal;\n      // skipping network is not allowed in default ui. We are use network switching modal for default ui.\n      if (!isCustomUi || (isCustomUi && !this.adapterOptions?.adapterSettings?.skipNetworkSwitching)) {\n        try {\n          await this.addChain(this.chainConfig);\n          await this.switchChain(connectedChainConfig, this.chainConfig);\n          this.connector = this.getWalletConnectInstance();\n        } catch (error) {\n          log.error(\"error while chain switching\", error);\n          // we need to create a new session since old session is already used and\n          // user needs to login again with correct chain with new qr code.\n          await this.createNewSession({ forceNewSession: true });\n          this.emit(\n            ADAPTER_EVENTS.ERRORED,\n            WalletInitializationError.fromCode(\n              5000,\n              `Not connected to correct network. Expected: ${this.chainConfig.displayName}, Current: ${\n                connectedChainConfig?.displayName || chainId\n              }, Please switch to correct network from wallet`\n            )\n          );\n          this.status = ADAPTER_STATUS.READY;\n          this.rehydrated = true;\n          return;\n        }\n      }\n    }\n    await this.wcProvider.setupProvider(this.connector);\n    this.subscribeEvents(this.connector);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n  }\n\n  private subscribeEvents(connector: WalletConnect): void {\n    connector.on(\"session_update\", async (error: Error | null) => {\n      if (error) {\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n      }\n    });\n  }\n\n  private getWalletConnectInstance(): WalletConnect {\n    const walletConnectOptions = this.adapterOptions.adapterSettings || {};\n    walletConnectOptions.bridge = walletConnectOptions.bridge || \"https://bridge.walletconnect.org\";\n    // Create a connector\n    return new WalletConnect(walletConnectOptions);\n  }\n}\n\nexport { WalletConnectV1Adapter };\n"],"names":["BaseEvmAdapter","this","provider","chainConfig","_this$chainConfig","chainId","WalletLoginError","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","params","signedMessage","verifySignedChallenge","sessionTime","saveToken","clearToken","BaseAdapter","WalletConnect","connectorOpts","pushServerOpts","cryptoLib","Connector","WALLET_CONNECT_EXTENSION_ADAPTERS","chains","CHAIN_NAMESPACES","logo","mobile","native","universal","desktop","WalletConnectV1Adapter","constructor","options","_defineProperty","WALLET_ADAPTERS","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","extensionAdapters","adapterOptions","connector","connected","wcProvider","_","Error","getChainConfig","getWalletConnectInstance","WalletConnectProvider","config","emit","ADAPTER_EVENTS","log","rehydrated","onConnectHandler","WalletInitializationError","adapterSettings","_this$adapterOptions$","qrcodeModal","skipLookupNetwork","_this$adapterOptions$2","skipNetworkSwitching","createNewSession","adapter","Promise","resolve","reject","on","error","Web3AuthError","message","setAdapterSettings","cleanup","killSession","networkSwitch","_this$adapterOptions$3","networkSwitchModal","addNetwork","appOrigin","hostname","addChain","connectedChainConfig","_this$adapterOptions$4","switchNetwork","currentChainConfig","newChainConfig","switchChain","lookup","opts","forceNewSession","pending","createSession","err","updateAdapterData","off","_this$chainConfig2","catch","displayName","isCustomUi","_this$adapterOptions2","_this$adapterOptions3","concat","setupProvider","subscribeEvents","reconnected","walletConnectOptions","bridge"],"sourceRoot":""}